/*  
 *  1.	객체지향 프로그램
 *  	기능별 분리해서 클래스와 클래스간의 연결해서 처리
 *  	=> 조립식					   --------- 메소드
 *  	ex) 컴퓨터
 *  		CPU / 하드디스크 / 모니터 / 메모리...
 *  		------------------------------- 믈래스
 *  		메인보드에 조립
 *  		-----------
 *  => 클래스
 *  	1) 사용자 정의 데이터형 => 데이터형 클래스
 *  						  ----------- => 관련 데이터를 모아서 관리 => ~VO, ~DTO
 *  	2) 한개의 기능 (메소드) => 액션 클래스	=> 데이터를 활용하는 메소드 => ~DAO, ~Model
 *  => JSP => 사라지는 경향
 *  	Front => VueJS => 소규모
 *  			ReactJS => 대규모 => 최적화 : NextJS
 *  	Back => Spring-Boot
 *  class ClassName{
 *  	구성요소
 *  	-------------------------------
 *  	  **변수 : 멤버변수, 공유변수			=> 다른 클래스에서 사용이 가능
 *  		기본형(정수,실수,논리,문자,문자열,배열)
 *  	-------------------------------
 *  		생성자 : 멤버변수에 초기화	, 시작과 동시에 처리 기능	
 *  			=> 자동 로그인, 데이터베이스 연결
 *  			=> 서버 연결
 *  			=> 메모리 저장시 호출
 *  	-------------------------------
 *  	  **기능 설계 => 메소드
 *  	-------------------------------
 *  }
 *  
 *  메소드
 *  	=> 정의 : 한개의 기능을 수행하는 명령문의 집합
 *  			--------------
 *  			=> 조립 : process()
 *  			=> main에서 코딩을 하지 않는다
 *  				=> process()만 호출
 *  			=> 로그인 처리 / 회원 가입 / 회원 수정 / 회원 탈퇴..
 *  			=> 목록 / 글쓰기 / 상세보기 / 수정 / 삭제 / 검색
 *  	1. 반복적인 문장이 있는 경우
 *  	 ex)오라클 연결
 *  		--------
 *  		목록 읽기 기능
 *  		-----------
 *  		오라클 연결		=> 메소드
 *  		목록 읽기
 *  		오라클 닫기		=> 메소드
 *  		-----------
 *  		글쓰기
 *  		-----------
 *  		오라클 연결
 *  		글쓰기
 *  		오라클 닫기
 *  		-----------
 *  		상세보기
 *  		-----------
 *  		오라클 연결
 *  		상세보기
 *  		오라클 닫기
 *  		-----------
 *  	2. 명령문을 기능별 분리 => 단락을 나눠서 처리
 *  		= 가독성	: 보기가 편리하다 (소스가 간결하다)
 *  		= 유지보수	: 수정이 용이
 *  		= 재사용	: 어떤 클래스에서든 필요시마다 사용이 가능
 *  		= 최적화	: 
 *  	-------------------------------------------
 *  	데이터 저장 => 저장된 데이터 가공
 *  		|			  |
 *  	   변수		  연산자/제어문
 *  	   배열		  --------- 묶어서 처리 => 메소드
 *  	-------------------------------------------
 *  	메소드 => 사용할때 (호출)	
 *  			호출된 메소드 처음부터 수행 => 호출된 위치로 복귀
 *  
 *  	메소드 구성요소
 *  	1) 결과값 : 사용자 요청에 따라 결과값 추출(리턴형)
 *  		ex) Math.random() => 난수를 추출
 *  	2) 사용자 요청 : 매개변수
 *  		ex) 로그인 요청 => id, pwd
 *  			+ => 정수, 정수
 *  	3) 메소드명 : 기능에 맞게 이름부여
 *  				=> plus(), minus()...
 *  				=> 변수 식별자와 동일
 *  					1) 알파벳, 한글 => 알파벳 대소문자 구분
 *  					2) 숫자 => 첫글자에 사용 불가
 *  					3) 키워드 사용 불가
 *  					4) 특수문자 => $, _
 *  					5) 공백 사용 불가
 *  					6) 소문자소 시작 권장 => 문법은 아니다
 *  메소드 형식 : 선언부 / 구현부
 *  
 *  [접근지정어][옵션] 리턴형 메소드명(매개변수...) //  선언부
 *  {
 *  	구현부
 *  	return 값 => 결과값
 *  }
 *  접근 지정어
 *  	public : 모든 클래스
 *  	private : 자신의 클래스
 *  	protected : 같은 폴더 | 상속
 *  	default : 같은 폴더
 *  옵션
 *  	static : 자동 메모리 저장
 *  	final : 종단(수정불가)
 *  	abstract : 선언만
 *  리턴형 => 결과값은 반드시 1개만 사용가능
 *  	기본형
 *  	배열
 *  	클래스
 *  매개변수 => 여러개 사용 가능
 *  ------------------------
 *  	리턴형	매개변수
 *  1-----------------------
 *  	 O		  O
 *  String substring(int begin)
 *   리턴형			   매개변수
 *  2-----------------------
 *  	 O		  X
 *  double random()
 *   리턴형
 *  3-----------------------
 *  	 X		  O
 *  System.out.println(String s)
 *  				    매개변수
 *  4-----------------------
 *  	 X		  X				=> 사용빈도는 거의 없다
 *  void System.out.println()
 *  ------------------------
 *  3, 4 => 메소드 자체에서 출력
 *  
 *  => 결과값을 받아서 출력
 *  => 메소드안에서 출력
 *  => return => void는 생략이 가능
 *  
 *  자동생성
 *  ------
 *  import java.lang.*; => String, System
 *  => 메소드 : void일 경우에 생략을하면 자동첨부
 *  
 *  메소드는 반드시 호출을 해야 사용이 가능
 *  void display()
 *  int display()
 *  int display(int a)
 *  void display(int a, int b)
 *  
 *  public static void main(String[] arg){
 *  	display();
 *  
 *  	int a = display();
 *  	
 *  	int b = display(10);
 *  	
 *  	display(10, 20);
 *  }
 */
public class 메소드_1 {

	// 4) 리턴형X / 매개변수X
	// => 메소드안에서 구구단을 출력
	static void gugudan(){ // void => 메소드안에서 출력 => 전체 처리를 한다
		for(int i = 1; i <= 9; i++) {
			for(int j = 2; j <= 9; j++) {
				System.out.printf("%2d * %2d = %2d\t", j, i, i * j);
			}
			System.out.println();
		}
	}
	public static void main(String[] args) {
		gugudan();
		return; // 컴파일시에 return이 없는 경우에는 자동으로 생성
		//return => 메소드 종료
	}
	
}
